corr("specdata", 150)
source("corr.R")
corr("specdata", 150)
source("corr.R")
corr("specdata", 150)
source("corr.R")
corr("specdata", 150)
res <- corr("specdata", 150)
head(res)
summary(res)
source("corr.R")
res <- corr("specdata", 150)
summary(res)
submit()
submit()
submit()
?pnorm
pnorm(70, mean = 80, sd = 10)
q(95,mean=1100,sd=75)
qnorm(95,mean=1100,sd=75)
qnorm(.95,mean=1100,sd=75)
qnorm(.95,mean=1100,sd=7.5)
?bino
?binom
?dbinom
1-pbinom(3,5)
1-pbinom(3,5,.5)
pnorm(16,mean=15,sd=10)-pnorm(14,mean=15,sd=10)
pnorm(16,mean=15,sd=1)-pnorm(14,mean=15,sd=1)
?poiss
ppois(10,15)
ppois(5,15)
data <- read.csv("activity.csv")
setwd("../../")
setwd("./Reproducible_Research/RepData_PeerAssessment1/")
dir()
```
unzip(zipfile = "activity.zip")
data <- read.csv("activity.csv")
data <- read.csv("activity.csv")
head(data)
table(data$date)
?sapply
?apply
head(data)
sum(data$steps)
sum(data$steps[!is.na(data$steps)])
tapply(data$steps[!is.na(data$steps)], data$date,sum)
steps <- data[!is.na(data$steps)]
steps <- data[!is.na(data$steps),]
dataStep <- data[!is.na(data$steps),]
tapply(dataStep$steps, dataStep$date, sum)
head(dataStep)
dataStep[dataStep$date = "2012-10-02",]
dataStep[dataStep$date == "2012-10-02",]
dataStep$steps[dataStep$date == "2012-10-02",]
dataStep[dataStep$date == "2012-10-02",1]
?tapply
tapply(data$steps, data$date, sum, na.rm = TRUE)
dataStep <- tapply(data$steps, data$date, sum, na.rm = TRUE)
hist(dataStep)
summary(dataStep)
summary(dataStep, na.rm = TRUE)
?hist
hist(dataStep, breaks = 10)
hist(dataStep, breaks = 10, col = "green")
?hist
mean(dataStep)
median(dataStep)
library(ggplot2)
avg <-aggregate(x = list(steps = data$steps), by = list(interval = data$interval), FUN = mean, na.rm = T)
ggplot(data = avg, aes(x = interval, y = steps)) +
geom_line() +
xlab("5 min interval") +
ylab("avg number")
?aggregate
head(avg)
summary(avg)
?plot
plot(avg$interval, avg$steps, type = "l")
stepAvg <- tapply(data$steps, data$interval, mean, na.rm = TRUE)
head(stepAvg)
class(stepAvg)
dim(stepAvg)
length(stepAvg)
stepAVG[1]
stepAvg[1]
stepAvg[2]
stepAvg[2][1]
stepAvg[2][2]
stepAvg[2,]
plot(stepAvg)
plot(stepAvg, type = "l")
?plot
plot(stepAvg, type = "l", xlab = "x", ylab = "y")
plot(stepAvg, type = "l", main = "Average Daily Activity", xlab = "Time", ylab = "Average number of steps")
plot(stepAvg, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
plot(stepAvg, type = "l", main = "Average Daily Activity", +
xlab = "Time(5 minute interval)", ylab = "Average number of steps")
```
---
## Loading and preprocessing the data
plot(stepAvg, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
plot(stepAvg, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
stepAvg <- tapply(data$steps, data$interval, mean, na.rm = TRUE)
plot(stepAvg, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
stepAvg <- tapply(data$steps, data$interval, mean, na.rm = TRUE)
plot(stepAvg, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
stepAvg <- tapply(data$steps, data$interval, mean, na.rm = TRUE)
plot(stepAvg, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
sum(is.na(data$steps))
?apply
?lapply
data$steps
data$steps
head(data$steps)
NA + 1
head(is.na(data$steps))
dataFilled <- apply(data$)
##dataFilled <- apply(data$)
```
sum(is.na(data$steps))
sum(is.na(data$steps))
sum(is.na(data$steps))
mean(c(1,2,3))
mean(c(1,2,NA))
mean(c(1,2,NA), na.rm = T)
mean(c(NA,NA), na.rm = T)
which
for(i in which(is.na(data$steps))) {}
which(is.na(data$steps))
?which
which(is.na(stepAvg))
stepAvg[1]
class(stepAvg[1])
class(stepAvg)
head(as.data.frame(stepAvg))
as.data.frame(stepAvg)[1,]
as.data.frame(stepAvg)[2,]
as.data.frame(stepAvg)[2,1]
dim(as.data.frame(stepAvg))
length(stepAvg[1])
length(stepAvg)
as.numeric(stepAvg[1])
as.numeric(stepAvg[2])
as.numeric(stepAvg)
stepAvg
?tapply
tapply(data$steps, data$interval, mean, na.rm = TRUE)
as.factor(tapply(data$steps, data$interval, mean, na.rm = TRUE))
as.factor(tapply(data$steps, data$interval, mean, na.rm = TRUE))[1,]
as.factor(tapply(data$steps, data$interval, mean, na.rm = TRUE))[1]
as.numeric(tapply(data$steps, data$interval, mean, na.rm = TRUE))
data$interval
stepAvg <- as.numeric(tapply(data$steps, data$interval, mean, na.rm = TRUE))
lot(stepAvg, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
plot(stepAvg, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
summary(data$interval)
length(stepAvg)
stepAvg <- as.numeric(tapply(data$steps, data$interval, mean, na.rm = TRUE))
stepAvg <- data.frame(x = data$interval[1:length(stepAvg)], y = stepAvg)
plot(stepAvg, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
head(stepAvg)
head(stepAvg,40)
tail(stepAvg)
stepAvg <- as.numeric(tapply(data$steps, data$interval, mean, na.rm = TRUE))
stepAvg <- data.frame(interval = data$interval[1:length(stepAvg)], average = stepAvg)
plot(stepAvg, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
head(stepAvg,10)
plot(stepAvg$interval, stepAvg$average, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
head(which(is.na(data$steps)))
data$interval[i]
data$interval[3]
stepAvg[stepAvg$interval==10,]
stepAvg$average[stepAvg$interval==10]
dataFilled <- data
for(i in which(is.na(data$steps))) {
dataFilled$steps[i] <- stepAvg$average[stepAvg$interval == data$interval[i]]
}
head(dataFilled)
?mapply
mapply(rep, 1:4, 4:1)
```{r}
hist(stepSum, breaks = 20, col = "green", main = "Histogram of total number of steps taken each day", xlab = "Total number of steps taken each day")
stepAvg[which.max(stepAvg$average),]
stepAvg[which.max(stepAvg$average),1]
dataFilled$date
weekday(dataFilled$date[1])
weekdays(dataFilled$date[1])
?weekdays
weekdays(as.POSIXlt(2012-11-04))
as.POSIXlt(Sys.time(), "GMT")
as.POSIXlt(Sys.date(), "GMT")
weekdays(Sys.time())
class(Sys.time())
weekdays(as.POSIXct("2014-12-14"))
weekdays(as.POSIXct(data$date[1]))
weekdays(data$date[1])
dataFilled$date <- as.POSIXct(data$date)
dataFilled$date <- as.POSIXct(dataFilled$date)
table(weekdays(dataFilled$))
table(weekdays(dataFilled$date))
weekdays(dataFilled$date[1])
weekdays(dataFilled$date[1]) %in% "S"
weekdays(dataFilled$date[1]) %in% "M"
"M" %in% weekdays(dataFilled$date[1])
weekdays(dataFilled$date[1]) == "Monday"
weekdays(dataFilled$date[1]) in c("Monday")
weekdays(dataFilled$date[1]) %in% c("Monday")
weekdays(dataFilled$date[1]) %in% c("Tuesday")
dataWeekday <- dataFilled[weekdays(dataFilled$date) %in% c("Monday","Tuesday","Wednesday","Thursday","Friday")]
dataWeekend <- dataFilled[weekdays(dataFilled$date) %in% c("Saturday","Sunday")]
dataFilled$date <- as.POSIXct(dataFilled$date)
dataWeekday <- dataFilled[weekdays(dataFilled$date) %in% c("Monday","Tuesday","Wednesday","Thursday","Friday"),]
dataWeekend <- dataFilled[weekdays(dataFilled$date) %in% c("Saturday","Sunday"),]
stepAvg <- as.numeric(tapply(dataWeekday$steps, dataWeekday$interval, mean, na.rm = TRUE))
stepAvg <- data.frame(interval = dataWeekday$interval[1:length(stepAvg)], average = stepAvg)
plot(stepAvg$interval, stepAvg$average, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
stepAvg <- as.numeric(tapply(dataWeekend$steps, dataWeekend$interval, mean, na.rm = TRUE))
stepAvg <- data.frame(interval = dataWeekend$interval[1:length(stepAvg)], average = stepAvg)
plot(stepAvg$interval, stepAvg$average, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
```{r}
weekdayAvg <- as.numeric(tapply(dataWeekday$steps, dataWeekday$interval, mean, na.rm = TRUE))
weekdayAvg <- data.frame(interval = dataWeekday$interval[1:length(weekdayAvg)], average = weekdayAvg)
plot(weekdayAvg$interval, weekdayAvg$average, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
```
```{r}
par(mfrow=c(2,1))
plot(weekdayAvg$interval, weekdayAvg$average, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
plot(weekendAvg$interval, weekendAvg$average, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
```
par(mfrow=c(2,1))
plot(weekdayAvg$interval, weekdayAvg$average, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps in weekdays")
plot(weekendAvg$interval, weekendAvg$average, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps in weekends")
weekendAvg <- as.numeric(tapply(dataWeekend$steps, dataWeekend$interval, mean, na.rm = TRUE))
weekendAvg <- data.frame(interval = dataWeekend$interval[1:length(weekendAvg)], average = weekendAvg)
par(mfrow=c(2,1))
plot(weekdayAvg$interval, weekdayAvg$average, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps in weekdays")
plot(weekendAvg$interval, weekendAvg$average, type = "l", main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps in weekends")
plot(weekdayAvg$average,type="l",col="black",xaxt="n",ylab="Energy sub metering")
lines(weekendAvg$average,type="l",col="red")
legend("topright",legend=names(dat1)[7:9],lty=c(1,2,3),col=c("black","red","blue"),bg="white",lwd=2))
plot(weekdayAvg$average,type="l",col="black",xaxt="n",ylab="Energy sub metering")
lines(weekendAvg$average,type="l",col="red")
weekdayAvg <- as.numeric(tapply(dataWeekday$steps, dataWeekday$interval, mean, na.rm = TRUE))
weekendAvg <- as.numeric(tapply(dataWeekend$steps, dataWeekend$interval, mean, na.rm = TRUE))
plot(weekdayAvg,type="l",col="black",main = "Average Daily Activity", xlab = "Time(5 minute interval)", ylab = "Average number of steps")
lines(weekendAvg,type="l",col="red")
?lty
?legend
legend("topright",legend=c("Weekdays","Weekends"), col=c("black","red"), bg="white", lty = "l",lwd=2)
legend("topright",legend=c("Weekdays","Weekends"), col=c("black","red"), bg="white",lwd=2)
?knit2html
knit2html()
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
data <- read.csv(file)
file <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
data <- read.csv(file)
dim(data)
head(data)
rm(list = ls())
file <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
acs <- read.csv(file)
sqldf("select pwgtp1 from acs where AGEP < 50")
install.package("RMySQL")
install.packages("RMySQL")
sqldf("select pwgtp1 from acs where AGEP < 50")
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
?nchar
con = url(url)
htmlcode =readLines(con)
class(htmlcode)
htmlcode[[1]]
htmlcode[[2]]
nchar(htmlcode[[10]])
nchar(htmlcode[[20]])
nchar(htmlcode[[30]])
nchar(htmlcode[[100]])
?read.fwf
url <- "http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(x)
sum(head$V4)
sum(x$V4)
head(x$V4)
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
x <- read.fwf(
file=url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
sum(x$V4)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
?read.csv
mydf <- read.csv(path2csv,strignsAsFactors = FALSE)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country = "IN", r_version <= "3.0.2")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran,!is.na(r_version))
cran2 <- select(cran, size: ip_id)
arrange(cran, ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran2, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size+mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
rm(list=ls())
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
by_package
summarize(by_package, mean(size))
?n
submit()
tbl
pack_sum(tbl)
pack_sum(cran)
source("summarize1.R")
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, count)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
?summarize
submit()
submit()
?chain
submit()
cran
by_package
pack_sum
top_countries
result1
submit()
?mutate
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
student2
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
gather(students2, sex_class, count, -grade)
?separate
separate(students2, sex_class, into = c("sex", "class"))
separate(students2, sex_class, c("sex", "class"))
separate(res, sex_class, c("sex", "class"))
library(stringi)
?separate
?()
?':'
separate(res, sex_class, c("sex", "class"))
?stringi
??stringi
separate()
?separate
res
separate(res, sex_class, c("sex", "class"))
install.packages("stringi")
separate(res, sex_class, c("sex", "class"))
library(stringi)
install.packages('stringi')
library('devtools')
install.packages('devtools')
library('devtools')
install_github('Rexamine/stringi')
library(stringi)
separate(res, sex_class, c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?rbind_list
rbind_list(passed, failed)
sat
?separate
sat
submit()
submit()
submit()
submit()
?tidyr
set.seed(4321)
permute <- sample(1:150, 150)
permute
splits <- rep(1:3, 50)
splits
?rep
irisSplit <- tapply(permute, splits, function(x) {})
irisSplit <- tapply(permute, splits, function(x) {
iris[x, c("Sepal.Length", "Species")]
})
irisSplit
x <- numeric()
x
?list
